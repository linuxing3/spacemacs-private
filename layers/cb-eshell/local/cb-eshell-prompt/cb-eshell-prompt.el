;;; cb-eshell-prompt.el --- <enter description here>  -*- lexical-binding: t; -*-

;; Copyright (C) 2016  Chris Barrett

;; Author: Chris Barrett <chris.d.barrett@me.com>
;; Package-Requires: ((s "1.10.0") (f "0.17.2") (dash "2.12.1") (magit "20160724.858"))

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

(require 'cb-vars)
(require 'dash)
(require 'em-dirs)
(require 'eshell)
(require 'f)
(require 's)

(autoload 'magit-anything-modified-p "magit-git")
(autoload 'magit-anything-staged-p "magit-git")
(autoload 'magit-anything-unmerged-p "magit-git")
(autoload 'magit-get-current-branch "magit-git")
(autoload 'magit-get-current-tag "magit-git")
(autoload 'magit-git-string "magit-git")

(defconst cb-eshell-prompt--prompt-regexp
  (rx bol (or
           ;; default
           (and (* space) "λ" (or ">" "#") " ")
           ;; docker
           (and "@" (+ nonl) ":" (+ nonl) "$" space)))
  "Regexp matching the prompt generated by this package.")

(defvar-local cb-eshell-prompt--last-prompt nil)

(defun cb-eshell-prompt--make-prompt ()
  (require 'magit)
  (let ((prompt
         (list
          :directory (f-full (eshell/pwd))
          :root-user? (= (user-uid) 0)
          :git (list
                :hash (magit-git-string "rev-parse" "HEAD")
                :tag  (magit-get-current-tag)
                :root
                (-when-let (root (locate-dominating-file (eshell/pwd) ".git"))
                  (f-full root))
                :branch (magit-get-current-branch)
                :staged? (magit-anything-staged-p)
                :unmerged? (magit-anything-unmerged-p)
                :untracked? (ignore-errors
                              (not (s-blank? (s-trim (shell-command-to-string "git ls-files --others --exclude-standard")))))
                :unstaged? (magit-anything-staged-p)
                :modified? (magit-anything-modified-p))

          :last-command-success? (when (boundp 'eshell-last-command-status)
                                   (or (null eshell-last-command-status)
                                       (= eshell-last-command-status 0))))))
    (prog1 (propertize (cb-eshell-prompt--render prompt) 'read-only t 'rear-nonsticky t)
      (setq cb-eshell-prompt--last-prompt prompt))))

(defun cb-eshell-prompt--render (plist)
  (-let [(&plist :last-command-success? last-command-success?
                 :root-user? root-user?
                 ) plist]
    (concat
     (cond
      ((null cb-eshell-prompt--last-prompt)
       (concat (cb-eshell-prompt--render-header cb-eshell-prompt--last-prompt plist) "\n"))
      ((equal plist cb-eshell-prompt--last-prompt)
       "\n")
      (t
       (concat "\n" (cb-eshell-prompt--render-header cb-eshell-prompt--last-prompt plist))))

     (let ((colour (if last-command-success? cb-vars-solarized-hl-cyan cb-vars-solarized-hl-red)))
       (concat
        (propertize "λ" 'face `(:foreground ,colour))
        (propertize (if root-user? "#" ">") 'face `(:foreground ,colour))))

     " ")))

(defun cb-eshell-prompt--render-header (prev-plist plist)
  (-let* (((&plist
            :directory dir
            :git
            (&plist
             :branch git-branch
             :hash git-hash
             :tag git-tag
             :root git-root
             :staged? git-staged?
             :unstaged? git-unstaged?
             :unmerged? git-unmerged?
             :untracked? git-untracked?
             :modified? git-modified?)
            ) plist)
          (at-proj-root? (equal git-root dir))
          (git-status-changed? (not (equal (plist-get prev-plist :git) (plist-get plist :git))))

          (sections
           (concat
            ;; Display project info when at project root.
            (-when-let* ((_ at-proj-root?)
                         (parts (-non-nil
                                 (list
                                  (when git-hash
                                    (concat (propertize "vc:" 'face font-lock-comment-face)
                                            (propertize "git" 'face 'default)))
                                  (-when-let (lang (cb-eshell-prompt--project-lang git-root))
                                    (concat
                                     (propertize "lang:" 'face font-lock-comment-face)
                                     (propertize lang 'face 'default)))

                                  (-when-let (types (cb-eshell-prompt--project-types git-root))
                                    (concat
                                     (propertize "type:[" 'face font-lock-comment-face)
                                     (propertize (s-join " " types) 'face 'default)
                                     (propertize "]" 'face font-lock-comment-face)))))))
              (cb-eshell-prompt--prompt-section
               (propertize "project " 'face font-lock-comment-face)
               (s-join " " parts)))

            ;; Git branch info and status.
            (when (and git-hash (or at-proj-root? git-status-changed?))
              (cb-eshell-prompt--prompt-section
               (if git-branch
                   (concat
                    (propertize "branch:" 'face font-lock-comment-face)
                    (propertize git-branch 'face 'magit-branch-remote))
                 (propertize "DETACHED" 'face `(:foreground ,cb-vars-solarized-hl-orange)))

               (when git-tag
                 (concat
                  (propertize " tag:" 'face font-lock-comment-face)
                  (propertize git-tag 'face 'magit-tag)))

               (propertize " sha:" 'face font-lock-comment-face)
               (propertize (substring git-hash 0 (min (length git-hash) 6)) 'face 'default)

               (-when-let (statuses
                           (-non-nil (list
                                      (when git-staged? (propertize "staged" 'face `(:foreground ,cb-vars-solarized-hl-green)))
                                      (when git-unstaged? (propertize "unstaged" 'face `(:foreground ,cb-vars-solarized-hl-cyan)))
                                      (when git-unmerged? (propertize "unmerged" 'face `(:foreground ,cb-vars-solarized-hl-magenta)))
                                      (when git-modified? (propertize "modified" 'face `(:foreground ,cb-vars-solarized-hl-red)))
                                      (when git-untracked? (propertize "untracked" 'face 'default)))))
                 (concat
                  (propertize " state:[" 'face font-lock-comment-face)
                  (s-join " " (-non-nil statuses))
                  (propertize "]" 'face font-lock-comment-face)))))))

          (current-directory
           (if git-hash
               (let* ((parent (f-slash (f-abbrev (f-parent git-root))))
                      (subdirs (f-relative dir parent)))
                 (concat
                  (propertize parent 'face font-lock-comment-face)
                  (cb-eshell-prompt--propertize-dir subdirs)))

             (cb-eshell-prompt--propertize-dir (f-abbrev dir)))))
    (concat
     (-when-let* ((_ (or at-proj-root? git-status-changed?))
                  (_ git-root)
                  (proj-name (f-filename git-root)))
       (concat (propertize "@ " 'face font-lock-comment-face)
               (propertize proj-name 'face `(:foreground ,cb-vars-solarized-hl-cyan))))
     sections

     (let ((empty-sections? (and sections (s-blank? sections))))
       (cond
        (empty-sections? "")
        (sections "\n\n")
        (t "")))
     current-directory
     "\n")))

(defun cb-eshell-prompt--propertize-dir (dir)
  (let* ((parts (--map (propertize it 'face `(:foreground ,cb-vars-solarized-hl-blue))
                       (f-split dir)))
         (str (s-join (propertize (f-path-separator) 'face font-lock-comment-face)
                      parts))
         (str (s-chop-prefix "/" str)))
    (if (s-starts-with? "/~" str)
        (substring str 1)
      str)))

(defun cb-eshell-prompt--prompt-section (&rest components)
  (concat "\n"
          (propertize "- " 'face font-lock-comment-face)
          (s-join "" components)))

(defun cb-eshell-prompt--project-lang (project-root)
  (let ((files (-map 'f-ext (f-files project-root))))
    (cond
     ((--any? (equal "cabal" it) files)
      "haskell")
     ((--any? (equal "hs" it) files)
      "haskell")
     ((--any? (equal "sbt" it) files)
      "scala")
     ((--any? (equal "scala" it) files)
      "scala")
     ((--any? (equal "el" it) files)
      "elisp"))))

(defun cb-eshell-prompt--project-types (project-root)
  (let ((files (f-files project-root)))
    (-non-nil
     (list

      (when (--any? (s-matches? (rx "/Cask" eos) it) files)
        "cask")

      (when (--any? (s-matches? (rx "/.travis.yml" eos) it) files)
        "travis")

      (when (--any? (s-matches? (rx "/.coveragerc" eos) it) files)
        "coveralls")

      (when (--any? (s-matches? (rx "/" (or "M" "m") "akefile" eos) it) files)
        "make")

      (when (--any? (s-matches? (rx ".cabal" eos) it) files)
        "cabal")

      (when (--any? (s-matches? (rx "/stack.yaml" eos) it) files)
        "stack")

      ;; Scala projects

      (let ((build-sbt (f-join default-directory "build.sbt")))
        (-when-let ((_ scala-version)
                    (and (f-exists? build-sbt)
                         (s-match (rx bol (* space) "scalaVersion" (* space) ":=" (* space) "\"" (group (+ (any digit "."))))
                                  (f-read-text build-sbt 'utf-8))))
          scala-version))

      (when (--any? (s-matches? (rx ".sbt" eos) it) files)
        "sbt")

      (let ((sbt-plugins (f-join project-root "project/plugins.sbt")))
        (-when-let* ((str (and (f-exists? sbt-plugins)
                               (f-read-text sbt-plugins 'utf-8)))
                     ((_ version)
                      (s-match (rx "com.typesafe.play" (*? nonl)
                                   (group (+ (any digit "."))))
                               str)))
          (concat "play-" version)))

      (when (--any? (s-matches? (rx "/init.el" eos) it) files)
        "emacs.d")))))

(make-variable-buffer-local 'eshell-last-command-status)

;;;###autoload
(defun cb-eshell-prompt-init ()
  (with-no-warnings
    (setq eshell-prompt-function 'cb-eshell-prompt--make-prompt)
    (setq eshell-prompt-regexp cb-eshell-prompt--prompt-regexp)))

(provide 'cb-eshell-prompt)

;;; cb-eshell-prompt.el ends here
