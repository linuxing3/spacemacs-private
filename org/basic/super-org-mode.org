#+TITLE: Org Mode - Organize Your Life In Plain Text!
#+AUTHOR: xing wenjuIRC: linuxing3 on freenode
#+EMAIL: xingwenju@gmail.com

* Text is awesome

使用org-mode作为个人信息管理系统

从基本的 =TODO= and =DONE= 关键词到个人工作流，有很多体会和经验

The following setup in my .emacs enables =org-mode= for most buffers.
=org-mode= is the default mode for =.org=, =.org_archive=, and =.txt=
files.

#+begin_src emacs-lisp :result list
;; The following setting is different from the document so that you
;; can override the document path by setting your path in the variable
;; org-mode-user-lisp-path
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
;;
#+end_src

#+RESULTS:
: ((\.$ . org-mode) (\$ . org-mode) (\.\(org\|org_archive\|txt\)$ . org-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.js\' . js2-mode) (\.vue?\' . web-mode) (\.html?\' . web-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljx\' . clojurex-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|dtm\|edn\)\' . clojure-mode) (/git-rebase-todo\' . git-rebase-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:3fr\|a\(?:r[tw]\|vs\)\|bmp[23]?\|c\(?:als?\|myka?\|r[2w]\|u[rt]\)\|d\(?:c[mrx]\|ds\|jvu\|ng\|px\)\|exr\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|k\(?:25\|dc\)\|m\(?:iff\|ng\|rw\|s\(?:l\|vg\)\|tv\)\|nef\|o\(?:rf\|tb\)\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|ef\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:a[fs]\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|r[2f]\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:3f\|bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . emacs-lisp-byte-code-mode) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.rb\|ru\|rake\|thor\|jbuilder\|gemspec\|podspec\|/\(?:Gem\|Rake\|Cap\|Thor\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py\' . python-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.[ch]\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . html-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ck]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|[kz]shrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([]>:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.\(?:desktop\|la\)\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gnokiirc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/ . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode))

That's all you need to get started using headlines and lists in org-mode.

The rest of this document describes customizations I use in my setup,
how I structure org-mode files, and other changes to fit the way I
want org-mode to work.
** Organizing Your Life Into Org Files

任务分解到逻辑组或方案中。使用不同文件进行任务分组和子目录进行方案组合。

- 以下是工作任务文件

| Filename | Description                            |
|----------+----------------------------------------|
| todo.org | work tasks and things to keep track of |

- 以下是临时任务文件，用于抓取模版，快速生成

| Filename | Description         |
|----------+---------------------|
| gtd.org  | Capture task bucket |

- 以下是家庭相关可用文件

| Filename      | Description                    |
|---------------+--------------------------------|
| xingwenju.org | Personal tasks and notes       |
| daniel.org    | Tasks related to my son Daniel |

** Agenda Setup

Here is my current =org-agenda-files= setup.

#+begin_src emacs-lisp

  (if (boundp 'org-user-agenda-files)
      (setq org-agenda-files org-user-agenda-files)
    (setq org-agenda-files (quote ("~/Dropbox/org"
                   "~/Dropbox/org/project"
                   "~/Dropbox/shared"
                   "~/Dropbox/org/personal"))))
  ;; Here we define the posts dir
  (setq org-posts '("~/Dropbox/xingwenju.com/blogs/posts"
               "~/Dropbox/shared"))

  ;; Here we define the org dir
  (setq org-directory "~/Dropbox/org")

  ;; Here we define the org dir and others
  (setq org-agenda-dir "~/Dropbox/org")
  (setq org-agenda-file-gtd (expand-file-name "gtd.org" org-agenda-dir))
  (setq org-agenda-file-note (expand-file-name "notes.org" org-agenda-dir))
  (setq org-agenda-file-journal (expand-file-name "journal.org" org-agenda-dir))
  (setq org-agenda-file-code-snippet (expand-file-name "snippet.org" org-agenda-dir))
  (setq org-default-notes-file (expand-file-name "gtd.org" org-agenda-dir))
#+end_src

#+RESULTS:
: /home/vagrant/Dropbox/org/gtd.org

* Org babel

#+BEGIN_SRC emacs-lisp

;; (use-package org :ensure t)
;; (use-package org-plus-contrib :ensure t)
;;
;; ;; Org babel Initialization
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((shell      . t)
;;    (sh         . t)
;;    (js         . t)
;;    (emacs-lisp . t)
;;    (perl       . t)
;;    (scala      . t)
;;    (clojure    . t)
;;    (python     . t)
;;    (ruby       . t)
;;    (dot        . t)
;;    (css        . t)
;;    (plantuml   . t)))
;;
;; (setq org-confirm-babel-evaluate nil
;;       org-src-fontify-natively t
;;       org-src-tab-acts-natively t)

#+END_SRC

#+RESULTS:
: t

* Tasks and States

我使用TODO关键字。

我设置了色彩，在阳光下很好阅读。

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
       ("NEXT" :foreground "blue" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ("CANCELLED" :foreground "forest green" :weight bold)
          ("MEETING" :foreground "forest green" :weight bold)
          ("PHONE" :foreground "forest green" :weight bold))))
#+end_src

#+RESULTS:
| TODO      | :foreground | red          | :weight | bold |
| NEXT      | :foreground | blue         | :weight | bold |
| DONE      | :foreground | forest green | :weight | bold |
| WAITING   | :foreground | orange       | :weight | bold |
| HOLD      | :foreground | magenta      | :weight | bold |
| CANCELLED | :foreground | forest green | :weight | bold |
| MEETING   | :foreground | forest green | :weight | bold |
| PHONE     | :foreground | forest green | :weight | bold |

* Task States

任务状态是亮点，从开始到完成。

状态切换是非常关键。每一个任务都是从不同的状态进行切换的。

#+begin_src plantuml :file normal_task_states.png :cache yes
title Task States
[*] -> TODO
TODO -> NEXT
TODO -> DONE
NEXT -> DONE
DONE -> [*]
TODO --> WAITING
WAITING --> TODO
NEXT --> WAITING
WAITING --> NEXT
HOLD --> CANCELLED
WAITING --> CANCELLED
CANCELLED --> [*]
TODO --> HOLD
HOLD --> TODO
TODO --> CANCELLED
TODO: t
NEXT: n
DONE: d
WAITING:w
note right of WAITING: Note records\nwhat it is waiting for
HOLD:h
note right of CANCELLED: Note records\nwhy it was cancelled
CANCELLED:c
WAITING --> DONE
#+end_src

#+results[61c867b8eb4f49bc47e44ec2b534ac3219d82594]:
[[file:normal_task_states.png]]

* Project Task States

项目或者称 =project=, 定义是很简单的，即有子任务的综合型任务，带有 =TODO= 关键字。

项目可以在任意大纲级别中设置，只需要创建一个带有 =TODO= 状态的新任务。项目使用 =NEXT= 代表没有搁置。


#+begin_src emacs-lisp
(setq org-use-fast-todo-selection t)
#+end_src


#+begin_src emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

小贴士：通过设置状态，自动触发标签的更改。

状态改为 =CANCELLED= 就得到了 =CANCELLED= 标签。切换回去，就自动移除标签。

通过标签，可以在日历中方便地过滤你想要的事件和活动。

基本规则是这样的：

-  将状态切换到 =CANCELLED= adds a =CANCELLED= tag
-  将状态切换到 =WAITING= adds a =WAITING= tag
-  将状态切换到 =HOLD= adds =WAITING= and =HOLD= tags
-  将状态切换到  =WAITING= and =HOLD= tags
-  将状态切换到 =TODO= removes =WAITING=, =CANCELLED=, and =HOLD= tags
-  将状态切换到 =NEXT= removes =WAITING=, =CANCELLED=, and =HOLD= tags
-  将状态切换到 =DONE= removes =WAITING=, =CANCELLED=, and =HOLD= tags

#+begin_src emacs-lisp
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
          ("WAITING" ("WAITING" . t))
          ("HOLD" ("WAITING") ("HOLD" . t))
          (done ("WAITING") ("HOLD"))
          ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
          ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
          ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src

* Org Capture

使用最小的工作流，将主要任务通过模板设置到收件箱文件中，我将它命名为 =refile= 文件。

*** 这样的好处 [/]
- [] 抓取快
- [] 随时转存
- [] 可以添加新可用文件，不用修改模板

** DONE 模板Capture Templates
   CLOSED: [2017-10-27 Fri 01:50]
:PROPERTIES:
:CUSTOM_ID: CaptureTemplates
:END:

添加新任务时，我根据其特性进行如下归类，然后选择相应模板。

- A phone call (p)
- A meeting (m)
- An email I need to respond to (r)
- A new task (t)
- A new note (n)
- An interruption (j)
- A new habit (h)


** DONE Template
#+begin_src emacs-lisp

(setq org-capture-templates
      '(
    ;; ==================================
    ("t" "待办Todo" entry (file+headline org-agenda-file-gtd "Inbox")
     "** TODO [#B] %?\t%^g\n  %i\n"
     :empty-lines 1)
    ;; ==================================
    ("P" "Project" entry (file+headline org-agenda-file-gtd "Project")
     "** TODO [#B] %? [/]\t%^g\n - [ ] Protocolo\n - [ ] Paper\n - [ ] Press \n - [ ] Logistic\n - [ ] Misc\n"
     :empty-lines 1)
    ;; ==================================
    ("n" "笔记Notes" entry (file+headline org-agenda-file-note "Quick notes")
     "** %?\t%^g\n  %i\n %U"
     :empty-lines 1)
    ;; ==================================
     ("L" "Bookmark" entry (file+headline org-agenda-file-note "Inbox")
    "* %? [[%:link][%:description]] \nCaptured On: %U")
          ("p" "Protocol" entry (file+headline org-agenda-file-note "Inbox")
    "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
    ("c" "Chrome" entry (file+headline org-agenda-file-note "Quick notes")
    "** TODO [#C] %?\n %(xingwenju/retrieve-chrome-current-tab-url)\n %i\n %U"
    :empty-lines 1)
    ;; ==================================
    ("r" "回复Response" entry (file+headline org-agenda-file-gtd "Inbox")
    "** TODO %?\t%^g\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t)
    ;; ==================================
    ("s" "代码片段Code Snippet" entry
     (file org-agenda-file-code-snippet)
     "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")
    ;; ==================================
    ("j" "日志Journal"
     entry (file+olp+datetree org-agenda-file-journal)
     "* %?"
     :empty-lines 1)
    ;; End of Template
))
#+end_src

#+RESULTS:
| t | 待办Todo | entry | (file+headline org-agenda-file-gtd Inbox) | ** TODO [#B] %?	%^g |

** DONE Agenda custom commands

#+BEGIN_SRC emacs-lisp
#+END_SRC

* Org Pomodoro
  :LOGBOOK:
  CLOCK: 2017-11-06 Mon 10:38
  :END:

#+BEGIN_SRC emacs-lisp
   (use-package org-pomodoro
   :ensure t
   )
#+END_SRC

#+RESULTS:

* Org Agenda custom commands
#+BEGIN_SRC emacs-lisp
      (setq org-agenda-custom-commands
        '(
          ("w" . "任务安排")
            ("wa" "重要且紧急的任务" tags-todo "+PRIORITY=\"A\"")
            ("wb" "重要且不紧急的任务" tags-todo "-Weekly-Monthly-Daily+PRIORITY=\"B\"")
            ("wc" "不重要且紧急的任务" tags-todo "+PRIORITY=\"C\"")
          ("b" "写作" tags "BLOG")
          ("p" . "项目安排")
            ("pw" tags-todo "dev")
            ("pl" tags-todo "dev+PROJECT")
          ("d" . "孩子安排")
            ("da" "紧急" tags-todo "kid+PRIORITY=\"A\"")
            ("db" "普通" tags-todo "kid")
          ("h" "家务安排" tags-todo "home")
          ("W" "每周回顾"
           ((stuck "") ;; review stuck projects as designated by org-stuck-projects
        (tags "project") ;; review all projects (assuming you use todo keywords to designate projects)
        ))))

#+END_SRC

#+RESULTS:
: ((w . 任务安排) (wa 重要且紧急的任务 tags-todo +PRIORITY="A") (wb 重要且不紧急的任务 tags-todo -Weekly-Monthly-Daily+PRIORITY="B") (wc 不重要且紧急的任务 tags-todo +PRIORITY="C") (b 写作 tags BLOG) (p . 项目安排) (pw tags-todo dev) (pl tags-todo dev+PROJECT) (d . 孩子安排) (da 紧急 tags-todo kid+PRIORITY="A") (db 普通 tags-todo kid) (h 家务安排 tags-todo home) (W 每周回顾 ((stuck ) (tags project))))

* More settings Org mode
  Org bullets makes things look pretty
  All the keys will be set by =hydra=
  More template settings will be in =super-org-mode= file

** org easy and quick
  #+BEGIN_SRC emacs-lisp
      (setq org-use-speed-commands t
        org-return-follows-link t
        org-hide-emphasis-markers t
        org-completion-use-ido t
        org-outline-path-complete-in-steps nil
        org-src-fontify-natively t   ;; Pretty code blocks
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil ;; No code evaluation confirm
      )

    (setq org-agenda-inhibit-startup t) ;; ~50x speedup
    (setq org-agenda-span 'day)
    (setq org-agenda-use-tag-inheritance nil) ;; 3-4x speedup
    (setq org-agenda-window-setup 'current-window)
    (setq org-log-done t)

  #+END_SRC

  #+RESULTS:
  : t

** org-apps

  #+BEGIN_SRC emacs-lisp
    ;; more applications
      (setq org-file-apps
      (append '(
            ("\\.pdf\\'" . "evince %s")
            ) org-file-apps ))

  #+END_SRC
** org-ac
  #+BEGIN_SRC emacs-lisp
      (use-package org-ac
        :ensure t
        :init (progn
            (require 'org-ac)
            (org-ac/config-default)
            ))

  #+END_SRC

* Org-refile

  I will include all =org-agenda-files= as the refile targets

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)

  (setq org-refile-targets
    '((nil :maxlevel . 4)
      (org-posts :maxlevel . 4)
      (org-agenda-files :maxlevel . 4)))

#+END_SRC

#+RESULTS:
: ((nil :maxlevel . 4) (org-posts :maxlevel . 4) (org-agenda-files :maxlevel . 4))

* Org-archive

#+BEGIN_SRC emacs-lisp
  (setq org-archive-location "~/Dropbox/org/archived/%s_archive::")
#+END_SRC

#+RESULTS:
: ~/Dropbox/org/archived/%s_archive::

* org bullets
 #+BEGIN_SRC emacs-lisp

   ;; bullets
     (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

 #+END_SRC

* Journaling

  [[http://www.emacswiki.org/emacs/OrgJournal][org-journal]] essentially does what I have been doing by hand.
  With a little customization, I don't have to change anything else:
** File Location
  #+BEGIN_SRC emacs-lisp
   (use-package org-journal
      :ensure t)
   (setq org-journal-dir "~/Dropbox/org/journal/")
   (setq org-journal-date-format "#+TITLE: Journal Entry- %e %b %Y (%A)")
   (setq org-journal-time-format "")
  #+END_SRC

  #+RESULTS:

  The time format is the heading for each section. I set it to a
  blank since I really don't care about the time I add a section.

** Auto Insert a Journal Template

  Nice to /automatically/ insert a specific header if the journal entry
  file is empty using [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Autoinserting.html][auto-insert]].

  When I create a new journal entry, I want a snappy title and a
  checklist of daily tasks.  The template should insert a date that
  matches the file's name, not necessarily the current date.

  Also the inserted daily information and check-lists should only
  happen if I am creating today's journal, not catching up with the
  past... oh, and we might have special dailies to be inserted based
  on the day of the week. Guess I /could/ use YAS snippets, but then the
  code amount of code would over-shadow the text, so we'll make a
  function.

  #+BEGIN_SRC emacs-lisp
    (defun journal-file-insert ()
      "Insert's the journal heading based on the file's name."
      (interactive)
      (let* ((year  (string-to-number (substring (buffer-name) 0 4)))
         (month (string-to-number (substring (buffer-name) 4 6)))
         (day   (string-to-number (substring (buffer-name) 6 8)))
         (datim (encode-time 0 0 0 day month year)))

      (insert (format-time-string org-journal-date-format datim))
      (insert "\n\n  $0\n") ; Start with a blank separating line

      ;; Note: The `insert-file-contents' leaves the cursor at the
      ;; beginning, so the easiest approach is to insert these files
      ;; in reverse order:

      ;; If the journal entry I'm creating matches today's date:
      (when (equal (file-name-base (buffer-file-name))
               (format-time-string "%Y%m%d"))
        (insert-file-contents "journal-dailies-end.org")

        ;; Insert dailies that only happen once a week:
        (let ((weekday-template (downcase
                     (format-time-string "journal-%a.org"))))
          (when (file-exists-p weekday-template)
        (insert-file-contents weekday-template)))
        (insert-file-contents "journal-dailies.org")
        (insert "$0")

        (let ((contents (buffer-string)))
          (delete-region (point-min) (point-max))
          (yas-expand-snippet contents (point-min) (point-max))))))

    (define-auto-insert "/[0-9]\\{8\\}$" [journal-file-insert])
  #+END_SRC

  #+RESULTS:
  #+begin_example
  ((/[0-9]\{8\}$ . [journal-file-insert]) ((\.\([Hh]\|hh\|hpp\)\' . C / C++ header) (upcase (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name)) _ (file-name-extension buffer-file-name))) #ifndef  str n #define  str

   _

  #endif) ((\.\([Cc]\|cc\|cpp\)\' . C / C++ program) nil #include " (let ((stem (file-name-sans-extension buffer-file-name))) (cond ((file-exists-p (concat stem .h)) (file-name-nondirectory (concat stem .h))) ((file-exists-p (concat stem .hh)) (file-name-nondirectory (concat stem .hh))))) & 34 | -10) (([Mm]akefile\' . Makefile) . makefile.inc) (html-mode lambda nil (sgml-tag html)) (plain-tex-mode . tex-insert.tex) (bibtex-mode . tex-insert.tex) (latex-mode options, RET:  \documentclass[ str & 93 | -1 123 (read-string class: ) }
   (package, %s:  \usepackage[ (read-string options, RET: ) & 93 | -1 123 str }
  ) _
  \begin{document}
   _
  \end{document}) ((/bin/.*[^/]\' . Shell-Script mode magic number) lambda nil (if (eq major-mode (default-value (quote major-mode))) (sh-mode))) (ada-mode . ada-header) ((\.[1-9]\' . Man page skeleton) Short description:  .\" Copyright (C),  (format-time-string %Y)    (getenv ORGANIZATION) | (progn user-full-name)
  .\" You may distribute this file under the terms of the GNU Free
  .\" Documentation License.
  .TH  (file-name-base)   (file-name-extension (buffer-file-name))   (format-time-string %Y-%m-%d )
  .SH NAME
   (file-name-base)  \-  str
  .SH SYNOPSIS
  .B  (file-name-base)
   _
  .SH DESCRIPTION
  .SH OPTIONS
  .SH FILES
  .SH "SEE ALSO"
  .SH BUGS
  .SH AUTHOR
   (user-full-name) (quote (if (search-backward & (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1))  < (progn user-mail-address) >
  ) ((\.el\' . Emacs Lisp header) Short description:  ;;;  (file-name-nondirectory (buffer-file-name))  ---  str (make-string (max 2 (- 80 (current-column) 27)) 32) -*- lexical-binding: t; -*- (quote (setq lexical-binding t))

  ;; Copyright (C)  (format-time-string %Y)    (getenv ORGANIZATION) | (progn user-full-name)

  ;; Author:  (user-full-name) (quote (if (search-backward & (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1))  < (progn user-mail-address) >
  ;; Keywords:  (quote (require (quote finder))) (quote (setq v1 (mapcar (lambda (x) (list (symbol-name (car x)))) finder-known-keywords) v2 (mapconcat (lambda (x) (format %12s:  %s (car x) (cdr x))) finder-known-keywords
  ))) ((let ((minibuffer-help-form v2)) (completing-read Keyword, C-h:  v1 nil t)) str , ) & -2

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;;  _

  ;;; Code:



  (provide ' (file-name-base) )
  ;;;  (file-name-nondirectory (buffer-file-name))  ends here
  ) ((\.texi\(nfo\)?\' . Texinfo file skeleton) Title:  \input texinfo   @c -*-texinfo-*-
  @c %**start of header
  @setfilename  (file-name-base) .info
   @settitle  str
  @c %**end of header
  @copying
   (setq short-description (read-string Short description: )) .

   Copyright @copyright{}  (format-time-string %Y)    (getenv ORGANIZATION) | (progn user-full-name)

  @quotation
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.

  A copy of the license is also available from the Free Software
  Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.

  @end quotation

  The document was typeset with
  @uref{http://www.texinfo.org/, GNU Texinfo}.

  @end copying

  @titlepage
  @title  str
  @subtitle  short-description
  @author  (getenv ORGANIZATION) | (progn user-full-name)  < (progn user-mail-address) >
  @page
  @vskip 0pt plus 1filll
  @insertcopying
  @end titlepage

  @c Output the table of the contents at the beginning.
  @contents

  @ifnottex
  @node Top
  @top  str

  @insertcopying
  @end ifnottex

  @c Generate the nodes for this menu with `C-c C-u C-m'.
  @menu
  @end menu

  @c Update all node entries with `C-c C-u C-n'.
  @c Insert new nodes with `C-c C-c n'.
  @node Chapter One
  @chapter Chapter One

   _

  @node Copying This Manual
  @appendix Copying This Manual

  @menu
  ,* GNU Free Documentation License::  License for copying this manual.
  @end menu

  @c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
  @include fdl.texi

  @node Index
  @unnumbered Index

  @printindex cp

  @bye

  @c  (file-name-nondirectory (buffer-file-name))  ends here
  ))
  #+end_example

  #+begin_example
  ((/[0-9]\{8\}$ . [journal-file-insert]) ((\.\([Hh]\|hh\|hpp\)\' . C / C++ header) (upcase (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name)) _ (file-name-extension buffer-file-name))) #ifndef  str n #define  str

   _

  #endif) ((\.\([Cc]\|cc\|cpp\)\' . C / C++ program) nil #include " (let ((stem (file-name-sans-extension buffer-file-name))) (cond ((file-exists-p (concat stem .h)) (file-name-nondirectory (concat stem .h))) ((file-exists-p (concat stem .hh)) (file-name-nondirectory (concat stem .hh))))) & 34 | -10) (([Mm]akefile\' . Makefile) . makefile.inc) (html-mode lambda nil (sgml-tag html)) (plain-tex-mode . tex-insert.tex) (bibtex-mode . tex-insert.tex) (latex-mode options, RET:  \documentclass[ str & 93 | -1 123 (read-string class: ) }
   (package, %s:  \usepackage[ (read-string options, RET: ) & 93 | -1 123 str }
  ) _
  \begin{document}
   _
  \end{document}) ((/bin/.*[^/]\' . Shell-Script mode magic number) lambda nil (if (eq major-mode (default-value (quote major-mode))) (sh-mode))) (ada-mode . ada-header) ((\.[1-9]\' . Man page skeleton) Short description:  .\" Copyright (C),  (format-time-string %Y)    (getenv ORGANIZATION) | (progn user-full-name)
  .\" You may distribute this file under the terms of the GNU Free
  .\" Documentation License.
  .TH  (file-name-base)   (file-name-extension (buffer-file-name))   (format-time-string %Y-%m-%d )
  .SH NAME
   (file-name-base)  \-  str
  .SH SYNOPSIS
  .B  (file-name-base)
   _
  .SH DESCRIPTION
  .SH OPTIONS
  .SH FILES
  .SH "SEE ALSO"
  .SH BUGS
  .SH AUTHOR
   (user-full-name) (quote (if (search-backward & (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1))  < (progn user-mail-address) >
  ) ((\.el\' . Emacs Lisp header) Short description:  ;;;  (file-name-nondirectory (buffer-file-name))  ---  str (make-string (max 2 (- 80 (current-column) 27)) 32) -*- lexical-binding: t; -*- (quote (setq lexical-binding t))

  ;; Copyright (C)  (format-time-string %Y)    (getenv ORGANIZATION) | (progn user-full-name)

  ;; Author:  (user-full-name) (quote (if (search-backward & (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1))  < (progn user-mail-address) >
  ;; Keywords:  (quote (require (quote finder))) (quote (setq v1 (mapcar (lambda (x) (list (symbol-name (car x)))) finder-known-keywords) v2 (mapconcat (lambda (x) (format %12s:  %s (car x) (cdr x))) finder-known-keywords
  ))) ((let ((minibuffer-help-form v2)) (completing-read Keyword, C-h:  v1 nil t)) str , ) & -2

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;;  _

  ;;; Code:



  (provide ' (file-name-base) )
  ;;;  (file-name-nondirectory (buffer-file-name))  ends here
  ) ((\.texi\(nfo\)?\' . Texinfo file skeleton) Title:  \input texinfo   @c -*-texinfo-*-
  @c %**start of header
  @setfilename  (file-name-base) .info
   @settitle  str
  @c %**end of header
  @copying
   (setq short-description (read-string Short description: )) .

   Copyright @copyright{}  (format-time-string %Y)    (getenv ORGANIZATION) | (progn user-full-name)

  @quotation
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.

  A copy of the license is also available from the Free Software
  Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.

  @end quotation

  The document was typeset with
  @uref{http://www.texinfo.org/, GNU Texinfo}.

  @end copying

  @titlepage
  @title  str
  @subtitle  short-description
  @author  (getenv ORGANIZATION) | (progn user-full-name)  < (progn user-mail-address) >
  @page
  @vskip 0pt plus 1filll
  @insertcopying
  @end titlepage

  @c Output the table of the contents at the beginning.
  @contents

  @ifnottex
  @node Top
  @top  str

  @insertcopying
  @end ifnottex

  @c Generate the nodes for this menu with `C-c C-u C-m'.
  @menu
  @end menu

  @c Update all node entries with `C-c C-u C-n'.
  @c Insert new nodes with `C-c C-c n'.
  @node Chapter One
  @chapter Chapter One

   _

  @node Copying This Manual
  @appendix Copying This Manual

  @menu
  ,* GNU Free Documentation License::  License for copying this manual.
  @end menu

  @c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
  @include fdl.texi

  @node Index
  @unnumbered Index

  @printindex cp

  @bye

  @c  (file-name-nondirectory (buffer-file-name))  ends here
  ))
  #+end_example

  To use this, make the following files:
  - =journal-dailies.org= to contain the /real/ dailies
  - =journal-dailies-end.org= to contain any follow-up notes
  - =journal-mon.org= for additional text to be inserted on Monday journals
  - And a =journal-XYZ.org= for each additional weekday

** Helper functions
  A function to easily load today (and yesterday's) journal entry.

  #+BEGIN_SRC emacs-lisp
    (defun get-journal-file-today ()
      "Return filename for today's journal entry."
      (let ((daily-name (format-time-string "%Y%m%d")))
    (expand-file-name (concat org-journal-dir daily-name))))

    (defun get-journal-text-file-today ()
      "Return filename for today's journal entry with txt."
      (let ((daily-name (format-time-string "%Y%m%d")))
    (expand-file-name (concat org-journal-dir daily-name ".txt"))))

    (defun journal-file-today ()
      "Create and load a journal file based on today's date. File without extension"
      (interactive)
      (find-file (get-journal-file-today)))

    (defun journal-text-file-today ()
      "Create and load a journal file based on today's date. File with extension"
      (interactive)
      (find-file (get-journal-text-file-today)))
  #+END_SRC

  #+RESULTS:
  : journal-text-file-today

  Since I sometimes (not often) forget to create a journal entry,
  and need to re-write history.

  #+BEGIN_SRC emacs-lisp
    (defun get-journal-file-yesterday ()
      "Return filename for yesterday's journal entry."
      (interactive)
      (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
         (daily-name (format-time-string "%Y%m%d" yesterday)))
    (expand-file-name (concat org-journal-dir daily-name))))

    (defun journal-file-yesterday ()
      "Creates and load a file based on yesterday's date."
      (interactive)
      (find-file (get-journal-file-yesterday)))

  #+END_SRC

  #+RESULTS:
  : journal-file-yesterday

** Displaying Last Year's Journal Entry

  I really would really like to read what I did last year "at this
  time", and by that, I mean, 365 days ago, plus or minus a few to get
  to the same day of the week.

  #+BEGIN_SRC emacs-lisp
    (defun journal-last-year-file ()
      "Returns the string corresponding to the journal entry that
    happened 'last year' at this same time (meaning on the same day
    of the week)."
    (let* ((last-year-seconds (- (float-time) (* 365 24 60 60)))
       (last-year (seconds-to-time last-year-seconds))
       (last-year-dow (nth 6 (decode-time last-year)))
       (this-year-dow (nth 6 (decode-time)))
       (difference (if (> this-year-dow last-year-dow)
               (- this-year-dow last-year-dow)
             (- last-year-dow this-year-dow)))
       (target-date-seconds (+ last-year-seconds (* difference 24 60 60)))
       (target-date (seconds-to-time target-date-seconds)))
      (format-time-string "%Y%m%d" target-date)))

    (defun journal-last-year ()
      "Loads last year's journal entry, which is not necessary the
    same day of the month, but will be the same day of the week."
      (interactive)
      (let ((journal-file (concat org-journal-dir (journal-last-year-file))))
    (find-file journal-file)))

  #+END_SRC

** Taking Meeting Notes

   I've notice that while I really like taking notes in a meeting, I
   don't always like the multiple windows I have opened, so I created
   this function that I can easily call to eliminate distractions
   during a meeting.

   #+BEGIN_SRC emacs-lisp
     (defun meeting-notes ()
       "Call this after creating an org-mode heading for where the notes for the meeting
     should be. After calling this function, call 'meeting-done' to reset the environment."
       (interactive)
       (outline-mark-subtree)                              ;; Select org-mode section
       (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
       (deactivate-mark)
       (delete-other-windows)                              ;; Get rid of other windows
       (text-scale-set 2)                                  ;; Text is now readable by others
       (fringe-mode 0)
       (message "When finished taking your notes, run meeting-done."))
   #+END_SRC

   Of course, I need an 'undo' feature when the meeting is over...

   #+BEGIN_SRC emacs-lisp
     (defun meeting-done ()
       "Attempt to 'undo' the effects of taking meeting notes."
       (interactive)
       (widen)                                       ;; Opposite of narrow-to-region
       (text-scale-set 0)                            ;; Reset the font size increase
       (fringe-mode 1)
       (winner-undo))                                ;; Put the windows back in place
   #+END_SRC

* Helper functions

 #+BEGIN_SRC emacs-lisp

     (defadvice org-capture-finalize
     (after delete-capture-frame activate)
     "Advise capture-finalize to close the frame"
     (if (equal "capture" (frame-parameter nil 'name))
     (delete-frame)))

     (defadvice org-capture-destroy
     (after delete-capture-frame activate)
     "Advise capture-destroy to close the frame"
     (if (equal "capture" (frame-parameter nil 'name))
     (delete-frame)))

     (use-package noflet
     :ensure t )

     (defun make-capture-frame ()
     "Create a new frame and run org-capture."
     (interactive)
     (make-frame '((name . "capture")))
     (select-frame-by-name "capture")
     (delete-other-windows)
     (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
     (org-capture)))

 #+END_SRC

 #+RESULTS:
 : make-capture-frame

* Keybindings

#+BEGIN_SRC emacs-lisp

  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "<f7>") 'org-w3m-copy-for-org-mode)

  (define-key org-mode-map (kbd "s-p") 'org-priority)

  (define-key evil-normal-state-map (kbd "C-c C-w") 'org-refile)
  ;; (define-key evil-normal-state-map (kbd "C-c C-W") 'org-archive-subtree)

#+END_SRC

#+RESULTS:
: org-refile
