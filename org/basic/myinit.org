#+TITLE: Org Mode - Organize Your Life In Plain Text!
#+STARTUP: overview
#+AUTHOR: xing wenjuIRC: linuxing3 on freenode
#+EMAIL: xingwenju@gmail.com

This file should be called from =init.el= file of emacs with =babel-load=

* Interface tweaks

Setting the easy and quick operator

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Setting English Font
  (set-face-attribute
   'default nil :font "Source Code Pro 14")
  ;; Chinese Font ÅäÖÆÖÐÎÄ×ÖÌå
  ;;(dolist (charset '(kana han symbol cjk-misc bopomofo))
  ;;  (set-fontset-font (frame-parameter nil 'font)
  ;;                    charset
  ;;                    (font-spec :family "Microsoft Yahei" :size 16)))

#+END_SRC

#+RESULTS:

* Try

Package =try= can guess your next operation

#+BEGIN_SRC emacs-lisp
(use-package try
    :ensure t)
#+END_SRC

#+RESULTS:

* Which key

Brings up some help

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  #+END_SRC
* Evil mode

/vim/ Emulator can implement =vim= mode

#+BEGIN_SRC emacs-lisp
(use-package evil
 :config
 (evil-mode 1)
)
#+END_SRC

#+RESULTS:
: t

* Ace windows

For easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x O") 'other-frame)
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
  #+END_SRC

  #+RESULTS:

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp


     (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))


    (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-switch-buffer-faces-alist
      '((emacs-lisp-mode . swiper-match-face-1)
    (dired-mode . ivy-subdir)
    (org-mode . org-level-4)))
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))


    (use-package swiper
    :ensure t
    :bind (("C-r" . swiper)
       ("C-c C-r" . ivy-resume)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))


    (use-package ivy-hydra
    :ensure t
    :config
    (progn (message "ivy-hydra is enabled!"))
    )
  #+END_SRC

  #+RESULTS:
  : t

* Avy
Navigate by searching for a letter on the screen and jumping to it
See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+END_SRC

* Themes and modeline
  #+BEGIN_SRC emacs-lisp

    (use-package color-theme
    :ensure t)

    (use-package zenburn-theme
      :ensure t)

    (use-package github-modern-theme
    :ensure t)

    (use-package base16-theme
    :ensure t
    )

    (use-package moe-theme
    :ensure t)

    (use-package alect-themes
    :ensure t)


    (use-package powerline
    :ensure t
    :config
    (powerline-moe-theme)
    )

    ;; (load-theme 'base16-flat t)
    (moe-dark)
  #+END_SRC

  #+RESULTS:
  : t

* Reveal.js
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package ox-reveal
      :ensure t
      :init
      (load-library "ox-reveal")
      :config
      (load-library "ox-reveal")
      (setq org-reveal-root "")
      (setq org-reveal-mathjax t)
     )

    (defun org-reveal-root-toggle ()
      "Checking revealjs root, if online use cdn url
      if offline use current directory"
    (interactive)
    ;; Using the default location, you must download manually the revealjs files
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (message org-reveal-root)
    )

    (use-package htmlize
      :ensure t)
  #+END_SRC

  #+RESULTS:

* ox-hugo

ox-hugo implements a Markdown back-end for Org exporter.  The
exported Markdown is compatible with the Hugo static site generator
(https://gohugo.io/).

This exporter also generates the post front-matter in TOML or YAML.

To start using this exporter, add the below to your Emacs config:

Info: [[https://melpa.org/?utm_source=dlvr.it&utm_medium=twitter#/ox-hugo][ox-hugo on melpa]]

#+BEGIN_SRC emacs-lisp
;;(with-eval-after-load 'ox
;;   (require 'ox-hugo))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Main blog
  (use-package helm-ag :ensure t)
  (use-package easy-hugo :ensure t)
  (setq easy-hugo-basedir "~/Dropbox/xingwenju.com/")
  (setq easy-hugo-url "https://yourblogdomain")
  (setq easy-hugo-sshdomain "blogdomain")
  (setq easy-hugo-root "~/Dropbox/org/blogs")
  (setq easy-hugo-previewtime "300")
  ;; Total number of blogs
  (setq easy-hugo-blog-number 3)
  ;; Blog1
  (setq easy-hugo-basedir-1 "~/Dropbox/xingwenju.com/blog1/")
  (setq easy-hugo-url-1 "http://example1.com")
  (setq easy-hugo-root-1 "~/Dropbox/org/blogs")
  (setq easy-hugo-sshdomain-1 "blog1domain")
#+END_SRC

#+RESULTS:
: blog1domain

* calfw as calender

A beautiful calendar view for org agenda

#+BEGIN_SRC emacs-lisp
(use-package calfw :ensure t)
(use-package calfw-org :ensure t)
#+END_SRC

#+RESULTS:

* Flycheck

Speelling checking

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t)
      :config
      ;; (when (require 'flycheck nil t)
      ;;	(setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      ;;	(add-hook 'elpy-mode-hook 'flycheck-mode))
      )


  #+END_SRC

  #+RESULTS:
  : t

* Python

 As python is quick and effective, to save time, you should give it a
 try.

 All the packages is powerful.

 You can make a IDE with =elpy= package.

 However, you need to do some tweaks to improve the performance.

** Using Jedi as check tool

   You may need to run =jedi:setup-server= to install and activate
   server.

   After that, everything is just a quick go.

#+BEGIN_SRC emacs-lisp

  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")

  ;; (use-package jedi
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   (add-hook 'python-mode-hook 'jedi:ac-setup))

#+END_SRC

** IDE of python with =elpy=

  It turns out that Elpy, a popular emacs package for python
  Setting up yasnippet is as easy as:

  Don't forget to install the =virtualenv= and =pylint= packages

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))
  (use-package elpy
    :ensure t
    :config
    (elpy-use-ipython)
    ;; (setenv WORKON_HOME "~/")
    (if (string-equal system-type "darwin")
       (pyvenv-activate "~/anaconda")
    )
    (if (string-equal system-type "darwin")
       (pyvenv-activate "~/myenv")
    )
    (defalias 'workon 'pyvenv-workon)
    (elpy-enable))

#+END_SRC

#+RESULTS:
: t

** virtualenvwrapper

#+BEGIN_SRC emacs-lisp
    (use-package virtualenvwrapper
      :ensure t
      :config
      (venv-initialize-interactive-shells)
      (venv-initialize-eshell))

  #+END_SRC

  #+RESULTS:
  : t


If you’d like to go one step further and have Elpy switch to a local
version of pyenv when you enter a project folder, put this function in
your .emacs:

#+BEGIN_SRC emacs-lisp
(defun ssbb-pyenv-hook ()
"Automatically activates pyenv version if .python-version file
exists."
(f-traverse-upwards
(lambda (path)
  (let ((pyenv-version-path (f-expand ".python-version" path)))
  (if (f-exists? pyenv-version-path)
  (pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

(add-hook 'find-file-hook 'ssbb-pyenv-hook)

#+END_SRC

#+RESULTS:
| ssbb-pyenv-hook | recentf-track-opened-file | url-handlers-set-buffer-mode | global-git-gutter-mode-check-buffers | magit-edit-branch*description-check-buffers | magit-auto-revert-mode-check-buffers | git-commit-setup-check-buffer | projectile-find-file-hook-function | #[nil \302\301!\210\303\304!8\211\207 [buffer-file-name auto-revert-tail-pos make-local-variable 7 file-attributes] 3] | global-hungry-delete-mode-check-buffers | yas-global-mode-check-buffers | global-flycheck-mode-check-buffers | global-auto-complete-mode-check-buffers | evil-mode-check-buffers | global-undo-tree-mode-check-buffers | undo-tree-load-history-hook | global-font-lock-mode-check-buffers | epa-file-find-file-hook | vc-find-file-hook | tramp-set-auto-save | save-place-find-file-hook |

Finally, to clean up whitespace on a save, add:

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC

* Yasnippet

    I use it for boilerplate code. The example in the video shows how I
    set up a snippet for the boilerplate code used when creating an
    application with the Flask python microframework.

    In order to use this, you need to add some =snippets= to your
    directory.

    Then typeset the =keyword= and type =TAB= to expand the snippets.

    When you edit a new snippets, it will be added to the mode.

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
    (yas-global-mode 1))

  #+END_SRC

[[https://github.com/AndreaCrotti/yasnippet-snippets][snippets for yasnippet]]

  #+BEGIN_SRC emacs-lisp
     ;; (add-to-list 'package-archives
     ;;          '("melpa" . "http://melpa.milkbox.net/packages/") t)
     ;; (package-refresh-contents)
     ;; (package-install "yasnippet-snippets")
  #+END_SRC

* Misc packages
  #+BEGIN_SRC emacs-lisp

  ; Highlights the current cursor line
  (global-hl-line-mode t)

  ; flashes the cursor's line when you scroll
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  (setq beacon-color "#666600")
  )

  ; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))

  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))

  (setq save-interprogram-paste-before-kill t)

  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil) ;; or this

  #+END_SRC

  #+RESULTS:
  : revert-buffer

* iedit and narrow / widen dwim

  #+BEGIN_SRC emacs-lisp
  ; mark and edit all copies of the marked region simultaniously.
  (use-package iedit
  :ensure t)

  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

  #+END_SRC


  #+RESULTS:
  : narrow-or-widen-dwim

* Web Mode
#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
       (setq web-mode-engines-alist
         '(("django"    . "\\.html\\'")))
       (setq web-mode-ac-sources-alist
       '(("css" . (ac-source-css-property))
       ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
       ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
  (setq web-mode-enable-auto-closing t))
  (setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned


#+END_SRC

#+RESULTS:
: t
* Emmet mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
:ensure t
:config
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
)
#+END_SRC
* Javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:ensure ac-js2
:init
(progn
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
))

(use-package js2-refactor
:ensure t
:config
(progn
(js2r-add-keybindings-with-prefix "C-c C-m")
;; eg. extract function with `C-c C-m ef`.
(add-hook 'js2-mode-hook #'js2-refactor-mode)))
(use-package tern
:ensure tern
:ensure tern-auto-complete
:config
(progn
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(tern-ac-setup)
))

;;(use-package jade
;;:ensure t
;;)

(use-package nodejs-repl
:ensure t
)

(add-hook 'js-mode-hook
      (lambda ()
        (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-sexp)
        (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
        (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
        (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)))
#+END_SRC

#+RESULTS:

* DIRED
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :ensure t
  :config (require 'dired+)
  )


(use-package dired-quick-sort
  :ensure t
  :config
  (dired-quick-sort-setup))

#+END_SRC
* Important productivity
#+BEGIN_SRC emacs-lisp

(setq user-full-name "Xing Wenju"
      user-mail-address "xingwenju@gmail.com")
;;--------------------------------------------------------------------------

;;--------------------------------------------------------------------------
;; latex
(use-package tex
:ensure auctex)

(defun tex-view ()
    (interactive)
    (tex-send-command "evince" (tex-append tex-print-file ".pdf")))


;;--------------------------------------------------------------------------

;; babel stuff

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . t)
   (C . t)
   (js . t)
   (ditaa . t)
   (dot . t)
   (org . t)
   (shell . t )
   (latex . t )
   ))


;;--------------------------------------------------------------------------

;; projectile
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
(setq projectile-completion-system 'ivy))

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-on))

;;--------------------------------------------------------------------------
;; (use-package smartparens
;; :ensure t
;; :config
;; (use-package smartparens-config)
;; (use-package smartparens-html)
;; (use-package smartparens-python)
;; (use-package smartparens-latex)
;; (smartparens-global-mode t)
;; (show-smartparens-global-mode t))

;;--------------------------------------------


(use-package cider
  :ensure t
  :config
  ; this is to make cider-jack-in-cljs work
  (setq cider-cljs-lein-repl
      "(do (require 'figwheel-sidecar.repl-api)
       (figwheel-sidecar.repl-api/start-figwheel!)
       (figwheel-sidecar.repl-api/cljs-repl))")

  )

(use-package ac-cider
  :ensure t
  :config
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(progn
       (add-to-list 'ac-modes 'cider-mode)
       (add-to-list 'ac-modes 'cider-repl-mode)))
  )

;;--------------------------------------------------------------------------
(use-package magit
:ensure t
:init
(progn
(bind-key "C-x g" 'magit-status)
))

(use-package git-gutter
:ensure t
:init
(global-git-gutter-mode +1))

(use-package git-timemachine
:ensure t
)

;; font scaling
(use-package default-text-scale
  :ensure t
  :config
  (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
  (global-set-key (kbd "C-M--") 'default-text-scale-decrease))

#+END_SRC

* Flyspell and autofill

  In order to use the =ispell= you can install more dictionaries like
  *spanish*

  =ispanish= is the package name.

  Then turn on =flycheck= on =org-mode= by using =hook=

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(add-hook 'mu4e-compose-mode-hook 'turn-on-flyspell)
(add-hook 'mu4e-compose-mode-hook 'turn-on-auto-fill)
#+END_SRC

* Youdao dictionary
    有道词典
    #+BEGIN_SRC emacs-lisp
    (use-package youdao-dictionary
    :ensure t)
    #+END_SRC
* Better Shell
#+BEGIN_SRC emacs-lisp :tangle no
(use-package better-shell
    :ensure t
    :bind (("C-'" . better-shell-shell)
       ("C-;" . better-shell-remote-open)))
#+END_SRC
* eshell stuff
#+BEGIN_SRC emacs-lisp

  (use-package shell-switcher
    :ensure t
    :config
    (setq shell-switcher-mode t)
    :bind (("C-'" . shell-switcher-switch-buffer)
       ("C-x 4 '" . shell-switcher-switch-buffer-other-window)
       ("C-M-'" . shell-switcher-new-shell)))


  ;; Visual commands
  (setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
                 "ncftp" "pine" "tin" "trn" "elm" "vim"
                 "nmtui" "alsamixer" "htop" "el" "elinks"
                 ))
  (setq eshell-visual-subcommands '(("git" "log" "diff" "show")))
  (setq eshell-list-files-after-cd t)
  (defun eshell-clear-buffer ()
    "Clear terminal"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
  (add-hook 'eshell-mode-hook
        '(lambda()
           (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

  (defun eshell/magit ()
    "Function to open magit-status for the current directory"
    (interactive)
    (magit-status default-directory)
    nil)

 ;; smart display stuff
(require 'eshell)
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)

(add-hook 'eshell-mode-hook
  (lambda ()
    (eshell-smart-initialize)))
;; eshell here
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
             (file-name-directory (buffer-file-name))
           default-directory))
     (height (/ (window-total-height) 3))
     (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-!") 'eshell-here)

#+END_SRC

Eshell prompt
#+BEGIN_SRC emacs-lisp
 (defcustom dotemacs-eshell/prompt-git-info
  t
  "Turns on additional git information in the prompt."
  :group 'dotemacs-eshell
  :type 'boolean)

;; (epe-colorize-with-face "abc" 'font-lock-comment-face)
(defmacro epe-colorize-with-face (str face)
  `(propertize ,str 'face ,face))

(defface epe-venv-face
  '((t (:inherit font-lock-comment-face)))
  "Face of python virtual environment info in prompt."
  :group 'epe)

  (setq eshell-prompt-function
      (lambda ()
    (concat (propertize (abbreviate-file-name (eshell/pwd)) 'face 'eshell-prompt)
        (when (and dotemacs-eshell/prompt-git-info
               (fboundp #'vc-git-branches))
          (let ((branch (car (vc-git-branches))))
            (when branch
              (concat
               (propertize " [" 'face 'font-lock-keyword-face)
               (propertize branch 'face 'font-lock-function-name-face)
               (let* ((status (shell-command-to-string "git status --porcelain"))
                  (parts (split-string status "\n" t " "))
                  (states (mapcar #'string-to-char parts))
                  (added (count-if (lambda (char) (= char ?A)) states))
                  (modified (count-if (lambda (char) (= char ?M)) states))
                  (deleted (count-if (lambda (char) (= char ?D)) states)))
             (when (> (+ added modified deleted) 0)
               (propertize (format " +%d ~%d -%d" added modified deleted) 'face 'font-lock-comment-face)))
               (propertize "]" 'face 'font-lock-keyword-face)))))
        (when (and (boundp #'venv-current-name) venv-current-name)
          (concat
            (epe-colorize-with-face " [" 'epe-venv-face)
            (propertize venv-current-name 'face `(:foreground "#2E8B57" :slant italic))
            (epe-colorize-with-face "]" 'epe-venv-face)))
        (propertize " $ " 'face 'font-lock-constant-face))))
#+END_SRC
#+RESULTS:
: t
* Elfeed
#+BEGIN_SRC emacs-lisp


  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-db-directory "~/Dropbox/shared/elfeeddb")
    (setq elfeed-feeds
    '("http://nullprogram.com/feed/"
      "http://jr0cket.co.uk/atom.xml"
      "https://linuxing3.github.io/rss.xml"
      "http://ergoemacs.org/emacs/blog.xml"
      "http://planet.emacsen.org/atom.xml"))
    )


  ;; wget https://github.com/remyhonig/elfeed-org/blob/master/elfeed-org.el
  (use-package elfeed-org
    :ensure t
    :config
   (setq rmh-elfeed-org-files (list
     "~/Dropbox/config/emacs/literate/xingwenju-elfeed-resource.org"
    )))

#+END_SRC

#+RESULTS:

* c++
#+BEGIN_SRC emacs-lisp
(use-package ggtags
:ensure t
:config
(add-hook 'c-mode-common-hook
      (lambda ()
        (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
          (ggtags-mode 1))))
)

#+END_SRC

#+RESULTS:

* Dumb jump
#+BEGIN_SRC emacs-lisp

(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
     ("M-g j" . dumb-jump-go)
     ("M-g x" . dumb-jump-go-prefer-external)
     ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
  ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
:init
(dumb-jump-mode)
  :ensure
)



#+END_SRC
* Origami folding
#+BEGIN_SRC emacs-lisp
(use-package origami
:ensure t)
#+END_SRC

#+RESULTS:

* IBUFFER

To Group the buffers, use filtered groups

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
    (quote (("default"
         ("dired" (mode . dired-mode))
         ("org" (name . "^.*org$"))

         ("web" (or (mode . web-mode) (mode . js2-mode)))
         ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
         ("mu4e" (or

         (mode . mu4e-compose-mode)
         (name . "\*mu4e\*")
         ))
         ("programming" (or
                 (mode . python-mode)
                 (mode . c++-mode)))
         ("emacs" (or
               (name . "^\\*scratch\\*$")
               (name . "^\\*Messages\\*$")))
         ))))
  (add-hook 'ibuffer-mode-hook
        (lambda ()
          (ibuffer-auto-mode 1)
          (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
                      ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

#+END_SRC
* Prodigy Service

  Define more services
#+BEGIN_SRC emacs-lisp
  (use-package prodigy
    :ensure t
    :config)

  (prodigy-define-service
    :name "Python app"
    :command "/usr/bin/python"
    :args '("-m" "SimpleHTTPServer" "6001")
    :cwd "/Dropbox/Dropbox/xingwenju.com/blogs/output"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)

  (prodigy-define-service
    :name "Nikola Blog Local Serve"
    :command "/usr/local/anaconda3/bin/nikola"
    :args '("serve" "-p" "9999")
    :cwd "/Dropbox/Dropbox/xingwenju.com/blogs"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)

  (prodigy-define-service
    :name "Nikola Blog Build"
    :command "/usr/local/anaconda3/bin/nikola"
    :args '("build")
    :cwd "/Dropbox/Dropbox/xingwenju.com/blogs"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)

  (prodigy-define-service
    :name "Nikola Blog Deploy Github"
    :command "/usr/local/anaconda3/bin/nikola"
    :args '("github_deploy")
    :cwd "/Dropbox/Dropbox/xingwenju.com/blogs"
    :tags '(work)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)
#+END_SRC

#+RESULTS:
| :name | Nikola Blog Deploy Github | :command | /usr/local/anaconda3/bin/nikola | :args | (github_deploy)            | :cwd | /Dropbox/Dropbox/xingwenju.com/blogs        | :tags | (work) | :stop-signal | sigkill | :kill-process-buffer-on-stop | t |          |             |
| :name | Nikola Blog               | :command | /usr/local/anaconda3/bin/nikola | :args | (serve -p 9999)            | :cwd | /Dropbox/Dropbox/xingwenju.com/blogs        | :tags | (work) | :stop-signal | sigkill | :kill-process-buffer-on-stop | t | :process | Nikola Blog |
| :name | Python app                | :command | /usr/bin/python                 | :args | (-m SimpleHTTPServer 6001) | :cwd | /Dropbox/Dropbox/xingwenju.com/blogs/output | :tags | (work) | :stop-signal | sigkill | :kill-process-buffer-on-stop | t |          |             |

* Treemacs

I use the =treemacs= instead of =neotree= to show the explorer



#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

    (setq treemacs-follow-after-init          t
      treemacs-width                      35
      treemacs-indentation                2
      treemacs-git-integration            t
      treemacs-collapse-dirs              3
      treemacs-silent-refresh             nil
      treemacs-change-root-without-asking nil
      treemacs-sorting                    'alphabetic-desc
      treemacs-show-hidden-files          t
      treemacs-never-persist              nil
      treemacs-is-never-other-window      nil
      treemacs-goto-tag-strategy          'refetch-index)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    ))

  (use-package treemacs-projectile
  :defer t
  :ensure t
  :config
  (setq treemacs-header-function #'treemacs-projectile-create-header))

#+END_SRC

#+RESULTS:

* Load other files
   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (f)
       "load the elisp file only if it exists and is readable"
       (if (file-readable-p f)
       (load-file f)))

     (defun babel-load-if-exists (f)
       "babel load the elisp file only if it exists and is readable"
       (if (file-readable-p f)
       (org-babel-load-file f)))

     (load-if-exists "~/Dropbox/config/emacs/modules/services/ssh-tunnel.el")
     (load-if-exists "~/Dropbox/config/emacs/modules/services/xingwenju-email.el")
     (load-if-exists "~/Dropbox/config/emacs/common/aliases.el")

   #+END_SRC

   #+RESULTS:
   : t
* Misc functions

More functions will be loaded from [[file:~/Dropbox/config/emacs/common/xingwenju-helpers.org][helper functions]]

#+BEGIN_SRC emacs-lisp

  (babel-load-if-exists "~/Dropbox/config/emacs/common/xingwenju-helpers.org")

#+END_SRC

#+RESULTS:
: Loaded /Dropbox/Dropbox/config/emacs/common/xingwenju-helpers.el


Basic functions reload the init file

#+BEGIN_SRC emacs-lisp

  (defun xingwenju/reload-init ()
    "Reload the init file"
    (interactive)
    (load-file "~/Dropbox/config/emacs/common/init.el")
    )

  (defun xingwenju/set-bookmark-file ()
    "Load the bookmark file"
    (interactive)
    (setq bookmark-file "~/Dropbox/shared/emacs-bookmarks")
    (bookmark-load bookmark-file)
    )

  (xingwenju/set-bookmark-file)
#+END_SRC

#+RESULTS:
: Loading bookmarks from ~/Dropbox/shared/emacs-bookmarks...done

#+BEGIN_SRC emacs-lisp
  (defun xingwenju/load-library ()
  "Load some library of reveal"
  (interactive)
  (load-library "ox-reveal")
  )


  (xingwenju/load-library)
#+END_SRC

#+RESULTS:
: t

* W3m

#+BEGIN_SRC emacs-lisp

  (defun set-w3m-command ()
    "Set the w3m-command for different OS"
    (if (string-equal system-type "darwin")
      (setq w3m-command "/usr/local/Cellar/w3m/0.5.3/bin/w3m"))
    (if (string-equal system-type "gnu/linux")
      (setq w3m-command "/usr/local/bin/w3m"))
    (if (string-equal system-type "windows-nt")
      (setq w3m-command "c:\var\w3m\bin\w3m"))
  )
  (use-package w3m
      :ensure t
      :init
      (set-w3m-command)
      :config
      (setq w3m-bookmark-file "~/Dropbox/shared/www-bookmarks.html")
  )

  ;; (w3m-goto-url (concat "file://" w3m-bookmark-file))
#+END_SRC

#+RESULTS:
: t

* Nikola

Each time start the emacs, serve the blogs with nikola

I also setup the =prodigy= service to start the =nikola=


#+BEGIN_SRC emacs-lisp
(use-package nikola :ensure t)
(use-package ox-nikola :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun xingwenju/nikola-deploy ()
    "Nikola deploy to Github Page"
    (interactive)
    (shell-command "cd ~/Dropbox/xingwenju.com/blogs; nikola github_deploy")
    )

  (defun xingwenju/nikola-serve ()
    "Nikola serve with local server"
    (interactive)
    (shell-command "cd ~/Dropbox/xingwenju.com/blogs; nikola serve -p 9999 &")
    )

  (defun xingwenju/nikola-build ()
    "Nikola build new pages"
    (interactive)
    (shell-command "cd ~/Dropbox/xingwenju.com/blogs; nikola build &")
    )
#+END_SRC

#+RESULTS:
: xingwenju/nikola-build
